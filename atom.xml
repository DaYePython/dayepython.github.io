<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叶松胜</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yesongsheng.xyz/"/>
  <updated>2019-03-12T14:54:41.152Z</updated>
  <id>https://yesongsheng.xyz/</id>
  
  <author>
    <name>DaYe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Contextmanager</title>
    <link href="https://yesongsheng.xyz/passages/2019-03-12-Contextmanager/"/>
    <id>https://yesongsheng.xyz/passages/2019-03-12-Contextmanager/</id>
    <published>2019-03-12T14:45:47.000Z</published>
    <updated>2019-03-12T14:54:41.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识with"><a href="#初识with" class="headerlink" title="初识with"></a>初识with</h1><p>在Python中，读写文件这样的资源要特别注意，必须在使用完毕后正确关闭它们。正确关闭文件资源的一个方法是使用try…finally：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f = open(&quot;/directory/filename&quot;, &apos;r&apos;)</span><br><span class="line">    f.read()</span><br><span class="line">finally:</span><br><span class="line">      # 如果f不存在, 则应该是文件对象未打开</span><br><span class="line">    if f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但是写try:…finally:…非常繁琐。Python的with语句允许我们非常方便地使用资源，而不必担心资源没有关闭，所以上面的代码可以简化为：</p><p>==注意f只会在with语句块有效==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"/directory/filename"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.read()</span><br></pre></td></tr></table></figure><h1 id="with的工作原理"><a href="#with的工作原理" class="headerlink" title="with的工作原理"></a>with的工作原理</h1><p>并不是只有open()函数返回的fp对象才能使用with语句。实际上，任何对象，只要正确实现了上下文管理，就可以用于with语句。</p><p>实现上下文管理是通过<code>__enter__</code>和<code>__exit__</code>这两个方法实现的. 我们可以简单通过一个例子来说明with的内部调用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"There's no way out"</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">          <span class="comment"># 检查退出的类型</span></span><br><span class="line">        <span class="comment"># 当有异常发生时 exc_type存在值</span></span><br><span class="line">        <span class="keyword">if</span> exc_type:</span><br><span class="line">            print(<span class="string">'Open the door'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'100%'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s can uses love to generate electricity'</span> % self.name)</span><br></pre></td></tr></table></figure><p>我们可以通过以下代码调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 紧跟with后面的语句被求值后，返回对象的 `__enter__() `方法被调用,</span></span><br><span class="line"><span class="comment"># 这个方法的返回值将被赋值给as后面的变量    </span></span><br><span class="line"><span class="keyword">with</span> Generator(<span class="string">"LEX"</span>) <span class="keyword">as</span> lex:</span><br><span class="line">      lex.generate()</span><br><span class="line"><span class="comment"># 当with后面的代码块全部被执行完之后，将调用返回对象的 `__exit__()`方法。</span></span><br></pre></td></tr></table></figure><p>其实 with 就是这么简单, 大部分初学者只要理解到这里就可以了.</p><h1 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h1><ul><li><p>上下文管理协议（Context Management Protocol）：包含方法 <strong>enter</strong> 和<strong>exit</strong>，支持<br>该协议的对象要实现这两个方法。</p></li><li><p>上下文管理器（Context Manager）：支持上下文管理协议的对象，这种对象实现了<br><strong>enter</strong>和<strong>exit</strong>方法。上下文管理器定义执行 with 语句时要建立的运行时上下文，</p></li></ul><p>负责执行 with 语句块上下文中的进入与退出操作。通常使用 with 语句调用上下文管理器，</p><p>也可以通过直接调用其方法来使用。</p><p>运行时上下文（runtime context）：由上下文管理器创建，通过上下文管理器的 <strong>enter</strong> 和<br><strong>exit</strong> 方法实现，<strong>enter</strong> 方法在语句体执行之前进入运行时上下文，<strong>exit</strong>在</p><p>语句体执行完后从运行时上下文退出。with 语句支持运行时上下文这一概念。</p><ul><li>上下文表达式（Context Expression）：with 语句中跟在关键字 with 之后的表达式，该表达式<br>要返回一个上下文管理器对象。如 例子with后面的Generator(“LEX”) as lex:</li></ul><p>语句体（with-body）：with 语句包裹起来的代码块，在执行语句体之前会调用上下文管<br>理器的<strong>enter</strong>方法，执行完语句体之后会执行 <strong>exit</strong> 方法。</p><p>其实这些术语不需要你们立刻理解, 只需要在以后的课程或者项目中慢慢体会.</p><h1 id="contextmanager"><a href="#contextmanager" class="headerlink" title="@contextmanager"></a>@contextmanager</h1><p>编写<strong>enter</strong>和<strong>exit</strong>仍然很繁琐，因此Python的标准库contextlib提供了更简单的写法, 让我们更加简洁的定制自己的上下文管理器. 同样的爱之代码走起:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> context <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s can uses love to generate electricity'</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextamnager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_generator</span><span class="params">(name)</span>:</span></span><br><span class="line">      print(<span class="string">"I'm generating electricity from love again"</span>)</span><br><span class="line">      lex = Generator(name)</span><br><span class="line">    <span class="comment"># 返回给with...as...语句</span></span><br><span class="line">    <span class="keyword">yield</span> lex</span><br><span class="line">    print(<span class="string">'100%'</span>)</span><br></pre></td></tr></table></figure></p><p>@contextmanager这个decorator必须接受一个 ==generator== ，用yield语句把with … as var把变量输出出去, 然后属于你的上下文管理器就弄了, 是不是出奇的简单</p><p>好久没有这么简单</p><p>使用一下这个管理器, 说说感觉<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> create_generator(<span class="string">"LEX"</span>) <span class="keyword">as</span> lex:</span><br><span class="line">      lex.generate()</span><br></pre></td></tr></table></figure></p><p>感觉良好</p><h1 id="closing"><a href="#closing" class="headerlink" title="@closing"></a>@closing</h1><p>但是少年郎们还没结束呢, 让我们了解一下closing 的作用, 它的作用就是让不是上下文管理器的对象转化为上下文管理器, 即可使用with语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> closing(urlopen(<span class="string">'https://www.bilibili.com'</span>)) <span class="keyword">as</span> page:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> page:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>其实closing内部非常好实现, 内部还是调用了contextmanager方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closing</span><span class="params">(thing)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> thing</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        thing.close()</span><br></pre></td></tr></table></figure><p>closing 不同于 @contextmanager, 他的本身不需要生成器, 可谓加上这行代码, 秒变真男人</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>with 关联着对象的<strong>exit</strong>和<strong>enter</strong>方法, 你必须清楚他们是何时被调用, 他们的返回值又返回到哪里去了</p><p>@contextmanager 所装饰的对象必须是带yield的生成器, yield 会把后面的值返回给with…as…语句</p><p>@closing 原先必许在所装饰的对象定义一个close方法, 否则会报错, 但是现在不会, 所以这种一行真男人得灵药不多了</p><p>上下文管理器将会贯穿大型框架结构, 如flask的 Application上下文, 请求(request)上下文等等, 学习上下文管理器可以帮助我们更好理解那些框架的工作原理.</p><p>未完待续…</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p>廖雪峰 contextlib</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识with&quot;&gt;&lt;a href=&quot;#初识with&quot; class=&quot;headerlink&quot; title=&quot;初识with&quot;&gt;&lt;/a&gt;初识with&lt;/h1&gt;&lt;p&gt;在Python中，读写文件这样的资源要特别注意，必须在使用完毕后正确关闭它们。正确关闭文件资源的一个方法是使
      
    
    </summary>
    
      <category term="Python" scheme="https://yesongsheng.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yesongsheng.xyz/tags/Python/"/>
    
      <category term="With" scheme="https://yesongsheng.xyz/tags/With/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://yesongsheng.xyz/passages/2019-03-12-test/"/>
    <id>https://yesongsheng.xyz/passages/2019-03-12-test/</id>
    <published>2019-03-12T13:54:18.105Z</published>
    <updated>2019-03-12T14:44:09.017Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PhoneticSymbol.md</title>
    <link href="https://yesongsheng.xyz/passages/2019-03-06-PhoneticSymbol-md/"/>
    <id>https://yesongsheng.xyz/passages/2019-03-06-PhoneticSymbol-md/</id>
    <published>2019-03-06T12:11:23.000Z</published>
    <updated>2019-03-06T14:57:02.605Z</updated>
    
    <content type="html"><![CDATA[<p>利用拼音来记忆国际音标</p><a id="more"></a><h1 id="一-12个单元音"><a href="#一-12个单元音" class="headerlink" title="一. 12个单元音"></a>一. 12个单元音</h1><h2 id="1-5个长元音"><a href="#1-5个长元音" class="headerlink" title="1. 5个长元音"></a>1. 5个长元音</h2><p>特点: 拉长</p><table><thead><tr><th>音标</th><th>拼音注释</th><th>特点</th><th>读音</th></tr></thead><tbody><tr><td>/a:/</td><td>a~</td><td>口张至三指宽</td><td><audio src="http://pnq4zzx77.bkt.clouddn.com/mp3/a-sound2.mp3" controls preload></audio></td></tr><tr><td>/iː/</td><td>yi</td><td>咦(拖长嘴巴)</td><td><audio src="http://pnq4zzx77.bkt.clouddn.com/mp3/i-sound2.mp3" controls preload></audio></td></tr><tr><td>/ɔ:/</td><td>ao~</td><td>嗷</td><td><audio src="http://pnq4zzx77.bkt.clouddn.com/mp3/o-sound2.mp3" controls preload></audio></td></tr><tr><td>/ɜː/</td><td>er~</td><td>二</td><td><audio src="http://pnq4zzx77.bkt.clouddn.com/mp3/er-sound.mp3" controls preload></audio></td></tr><tr><td>/u:/</td><td>u~</td><td></td><td><audio src="http://pnq4zzx77.bkt.clouddn.com/mp3/u-sound2.mp3" controls preload></audio></td></tr></tbody></table><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=528478901&auto=1&height=66"></iframe><h2 id="2-8个短元音"><a href="#2-8个短元音" class="headerlink" title="2. 8个短元音"></a>2. 8个短元音</h2><p>特点: 短促有力瘦小腹</p><h1 id="三-8个双元音"><a href="#三-8个双元音" class="headerlink" title="三. 8个双元音"></a>三. 8个双元音</h1><p>特点: 饱满夸张</p><h1 id="四-10对清浊辅音"><a href="#四-10对清浊辅音" class="headerlink" title="四. 10对清浊辅音"></a>四. 10对清浊辅音</h1><p>特点: 成对出现, 成对的音标读音相似.</p><ul><li>清辅音: 注重喷气</li><li>浊辅音: 注重声带的震动</li></ul><h1 id="五-3个鼻辅音和2个半元音"><a href="#五-3个鼻辅音和2个半元音" class="headerlink" title="五. 3个鼻辅音和2个半元音"></a>五. 3个鼻辅音和2个半元音</h1><h2 id="鼻辅音"><a href="#鼻辅音" class="headerlink" title="鼻辅音"></a>鼻辅音</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用拼音来记忆国际音标&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="https://yesongsheng.xyz/categories/English/"/>
    
    
      <category term="Symbol" scheme="https://yesongsheng.xyz/tags/Symbol/"/>
    
      <category term="English" scheme="https://yesongsheng.xyz/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>[置顶]Bolg Post&#39;sTemplate</title>
    <link href="https://yesongsheng.xyz/passages/2019-03-05-Template-md/"/>
    <id>https://yesongsheng.xyz/passages/2019-03-05-Template-md/</id>
    <published>2019-03-05T12:44:47.000Z</published>
    <updated>2019-03-05T13:25:04.975Z</updated>
    
    <content type="html"><![CDATA[<p>This is abstract</p><a id="more"></a><p>This is post’s body<br>md 文件命名约定<code>YYYY-MM-DD-title.md</code>-</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is abstract&lt;/p&gt;
    
    </summary>
    
      <category term="Temlate" scheme="https://yesongsheng.xyz/categories/Temlate/"/>
    
    
      <category term="Template" scheme="https://yesongsheng.xyz/tags/Template/"/>
    
      <category term="Blog" scheme="https://yesongsheng.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://yesongsheng.xyz/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yesongsheng.xyz/passages/hello-world/"/>
    <id>https://yesongsheng.xyz/passages/hello-world/</id>
    <published>2019-03-05T07:16:20.923Z</published>
    <updated>2019-03-05T07:16:20.923Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
